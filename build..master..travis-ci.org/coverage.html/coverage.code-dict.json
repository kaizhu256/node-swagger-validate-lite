{"/home/travis/build/kaizhu256/node-swagger-validate-lite/test.js":"/* istanbul instrument in package swagger_validate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // re-init local\n        local = local.global.local = (local.global.utility2 ||\n            require('./assets.utility2.rollup.js')).requireReadme();\n        // init test\n        local.testRunInit(local);\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        local.testCase_buildApidoc_default = function (options, onError) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            if (local.modeJs !== 'node') {\n                onError(null, options);\n                return;\n            }\n            options = { whitelistDict: {\n                swaggerValidateFile: true,\n                validateBySwaggerJson: true\n            } };\n            local.buildApidoc(options, onError);\n        };\n    }());\n}());\n","/home/travis/build/kaizhu256/node-swagger-validate-lite/lib.swagger_validate.js":"///usr/bin/env node\n/* istanbul instrument in package swagger_validate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        /* istanbul ignore next */\n        if (local) {\n            local = local.global.utility2_rollup ||\n                local.global.utility2_rollup_old ||\n                require('./assets.utility2.rollup.js');\n            local.fs = null;\n        }\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_swagger_validate = local;\n        } else {\n            // require builtins\n            Object.keys(process.binding('natives')).forEach(function (key) {\n                if (!local[key] && !(/\\/|^_|^sys$/).test(key)) {\n                    local[key] = require(key);\n                }\n            });\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n        }\n        // init lib\n        local.local = local.swagger_validate = local;\n    }());\n\n\n\n    // run shared js-env code - function-before\n    /* istanbul ignore next */\n    (function () {\n        local.cliRun = function (fnc) {\n        /*\n         * this function will run the cli\n         */\n            var nop;\n            nop = function () {\n            /*\n             * this function will do nothing\n             */\n                return;\n            };\n            local.cliDict._eval = local.cliDict._eval || function () {\n            /*\n             * code\n             * eval code\n             */\n                local.global.local = local;\n                require('vm').runInThisContext(process.argv[3]);\n            };\n            local.cliDict['--eval'] = local.cliDict['--eval'] || local.cliDict._eval;\n            local.cliDict['-e'] = local.cliDict['-e'] || local.cliDict._eval;\n            local.cliDict._help = local.cliDict._help || function () {\n            /*\n             * [none]\n             * print help\n             */\n                var element, result, lengthList, sortDict;\n                sortDict = {};\n                result = [['[command]', '[args]', '[description]', -1]];\n                lengthList = [result[0][0].length, result[0][1].length];\n                Object.keys(local.cliDict).sort().forEach(function (key, ii) {\n                    if (key[0] === '_' && key !== '_default') {\n                        return;\n                    }\n                    sortDict[local.cliDict[key].toString()] =\n                        sortDict[local.cliDict[key].toString()] || (ii + 1);\n                    element = (/\\n +\\*(.*)\\n +\\*(.*)/).exec(local.cliDict[key].toString());\n                    // coverage-hack - ignore else-statement\n                    nop(local.global.__coverage__ && (function () {\n                        element = element || ['', '', ''];\n                    }()));\n                    element = [\n                        key.replace('_default', '[none]') + ' ',\n                        element[1].trim() + ' ',\n                        element[2].trim(),\n                        (sortDict[local.cliDict[key].toString()] << 8) + ii\n                    ];\n                    result.push(element);\n                    lengthList.forEach(function (length, jj) {\n                        lengthList[jj] = Math.max(element[jj].length, length);\n                    });\n                });\n                result.sort(function (aa, bb) {\n                    return aa[3] < bb[3]\n                        ? -1\n                        : 1;\n                });\n                console.log('usage:   ' + __filename + ' [command] [args]');\n                console.log('example: ' + __filename + ' --eval    ' +\n                    '\"console.log(\\'hello world\\')\"\\n');\n                result.forEach(function (element, ii) {\n                    lengthList.forEach(function (length, jj) {\n                        while (element[jj].length < length) {\n                            element[jj] += '-';\n                        }\n                    });\n                    element = element.slice(0, 3).join('---- ');\n                    if (ii === 0) {\n                        element = element.replace((/-/g), ' ');\n                    }\n                    console.log(element);\n                });\n            };\n            local.cliDict['--help'] = local.cliDict['--help'] || local.cliDict._help;\n            local.cliDict['-h'] = local.cliDict['-h'] || local.cliDict._help;\n            local.cliDict._default = local.cliDict._default || local.cliDict._help;\n            local.cliDict.help = local.cliDict.help || local.cliDict._help;\n            local.cliDict._interactive = local.cliDict._interactive || function () {\n            /*\n             * [none]\n             * start interactive-mode\n             */\n                local.global.local = local;\n                local.replStart();\n            };\n            if (local.replStart) {\n                local.cliDict['--interactive'] = local.cliDict['--interactive'] ||\n                    local.cliDict._interactive;\n                local.cliDict['-i'] = local.cliDict['-i'] || local.cliDict._interactive;\n            }\n            // run fnc()\n            fnc = fnc || function () {\n                if (local.cliDict[process.argv[2]]) {\n                    local.cliDict[process.argv[2]]();\n                    return;\n                }\n                local.cliDict._default();\n            };\n            fnc();\n        };\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // init cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            break;\n        }\n        local.cliDict = {};\n        local.cliDict._default = function () {\n        /*\n         * file/url\n         * swagger-validate file/url\n         */\n            local.swaggerValidateFile({ file: process.argv[2] }, function (error, data) {\n                console.error(data);\n                process.exit(error);\n            });\n        };\n        local.cliRun();\n        break;\n    }\n}());\n","/home/travis/build/kaizhu256/node-swagger-validate-lite/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis script will run a web-demo of swagger-validate-lite\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install swagger-validate-lite && PORT=8081 node example.js\n    3. open a browser to http://127.0.0.1:8081 and play with the web-demo\n    4. edit this script to suit your needs\n*/\n\n\n\n/* istanbul instrument in package swagger_validate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_swagger_validate\n            : global.utility2_moduleExports);\n        // init exports\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-test\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.maxHeight === '0px') {\n                    local.uiAnimateSlideDown(document.querySelector('#testReportDiv1'));\n                    document.querySelector('#testRunButton1').textContent = 'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    local.uiAnimateSlideUp(document.querySelector('#testReportDiv1'));\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                // validate #inputTextarea1\n                local.swagger_validate.swaggerValidateFile({\n                    data: document.querySelector('#inputTextarea1').value,\n                    file: 'inputTextarea1.json'\n                }, function (error, data) {\n                    document.querySelector('#outputPre1').style.color = error\n                        ? '#d00'\n                        : '#090';\n                    document.querySelector('#outputPre1').textContent = data;\n                });\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-test\n    /* istanbul ignore next */\n    case 'node':\n        // init exports\n        module.exports = local;\n        // require builtins\n        Object.keys(process.binding('natives')).forEach(function (key) {\n            if (!local[key] && !(/\\/|^_|^sys$/).test(key)) {\n                local[key] = require(key);\n            }\n        });\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<!-- \"assets.index.default.template.html\" -->\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n*,\\n\\\n*:after,\\n\\\n*:before {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 0 40px;\\n\\\n}\\n\\\nbody > a,\\n\\\nbody > button,\\n\\\nbody > div,\\n\\\nbody > input,\\n\\\nbody > pre,\\n\\\nbody > select,\\n\\\nbody > span,\\n\\\nbody > textarea {\\n\\\n    margin-bottom: 20px;\\n\\\n}\\n\\\nbody > button {\\n\\\n    width: 20rem;\\n\\\n}\\n\\\nbutton {\\n\\\n    cursor: pointer;\\n\\\n}\\n\\\npre {\\n\\\n    overflow-wrap: break-word;\\n\\\n    white-space: pre-wrap;\\n\\\n}\\n\\\n@keyframes uiAnimateShake {\\n\\\n    100% {\\n\\\n        transform: translateX(0);\\n\\\n    }\\n\\\n    0%, 20%, 60% {\\n\\\n        transform: translateX(10px);\\n\\\n    }\\n\\\n    40%, 80% {\\n\\\n        transform: translateX(-10px);\\n\\\n    }\\n\\\n}\\n\\\n.uiAnimateShake {\\n\\\n    animation-duration: 500ms;\\n\\\n    animation-name: uiAnimateShake;\\n\\\n}\\n\\\n.uiAnimateSlide {\\n\\\n    overflow-y: hidden;\\n\\\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\\n\\\n}\\n\\\n@keyframes uiAnimateSpin {\\n\\\n    0% { transform: rotate(0deg); }\\n\\\n    100% { transform: rotate(360deg); }\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    text-align: center;\\n\\\n}\\n\\\n.zeroPixel {\\n\\\n    border: 0;\\n\\\n    height: 0;\\n\\\n    margin: 0;\\n\\\n    padding: 0;\\n\\\n    width: 0;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 20rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\\n\\\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\\n\\\n<script>\\n\\\n/*jslint\\n\\\n    bitwise: true,\\n\\\n    browser: true,\\n\\\n    maxerr: 8,\\n\\\n    maxlen: 100,\\n\\\n    node: true,\\n\\\n    nomen: true,\\n\\\n    regexp: true,\\n\\\n    stupid: true\\n\\\n*/\\n\\\n(function () {\\n\\\n    \"use strict\";\\n\\\n    var ajaxProgressDiv1,\\n\\\n        ajaxProgressState,\\n\\\n        ajaxProgressUpdate,\\n\\\n        timerIntervalAjaxProgressUpdate;\\n\\\n    ajaxProgressDiv1 = document.querySelector(\"#ajaxProgressDiv1\");\\n\\\n    setTimeout(function () {\\n\\\n        ajaxProgressDiv1.style.width = \"25%\";\\n\\\n    });\\n\\\n    ajaxProgressState = 0;\\n\\\n    ajaxProgressUpdate = (window.local &&\\n\\\n        window.local.ajaxProgressUpdate) || function () {\\n\\\n        ajaxProgressDiv1.style.width = \"100%\";\\n\\\n        setTimeout(function () {\\n\\\n            ajaxProgressDiv1.style.background = \"transparent\";\\n\\\n            setTimeout(function () {\\n\\\n                ajaxProgressDiv1.style.width = \"0%\";\\n\\\n            }, 500);\\n\\\n        }, 1500);\\n\\\n    };\\n\\\n    timerIntervalAjaxProgressUpdate = setInterval(function () {\\n\\\n        ajaxProgressState += 1;\\n\\\n        ajaxProgressDiv1.style.width = Math.max(\\n\\\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\\n\\\n            Number(ajaxProgressDiv1.style.width.slice(0, -1)) || 0\\n\\\n        ) + \"%\";\\n\\\n    }, 1000);\\n\\\n    window.addEventListener(\"load\", function () {\\n\\\n        clearInterval(timerIntervalAjaxProgressUpdate);\\n\\\n        ajaxProgressUpdate();\\n\\\n    });\\n\\\n}());\\n\\\n</script>\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>edit or paste swagger.json data below to validate\\n\\\n</label>\\n\\\n<textarea class=\"oneval onkeyup onreset\" id=\"inputTextarea1\">' +\nJSON.stringify(JSON.parse(local.assetsDict['/assets.swgg.swagger.petstore.json']), null, 4) +\n'</textarea>\\n\\\n<pre id=\"outputPre1\"></pre>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script>window.utility2.onResetBefore.counter += 1;</script>\\n\\\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\\n\\\n<script src=\"assets.swagger_validate.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<script>window.utility2.onResetBefore();</script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        [\n            'assets.index.css',\n            'assets.index.template.html',\n            'assets.swgg.swagger.json',\n            'assets.swgg.swagger.server.json'\n        ].forEach(function (file) {\n            file = '/' + file;\n            local.assetsDict[file] = local.assetsDict[file] || '';\n            if (local.fs.existsSync(local.__dirname + file)) {\n                local.assetsDict[file] = local.fs.readFileSync(\n                    local.__dirname + file,\n                    'utf8'\n                );\n            }\n        });\n        local.assetsDict['/'] =\n            local.assetsDict['/assets.example.html'] =\n            local.assetsDict['/assets.index.template.html']\n            .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                // jslint-hack\n                String(match0);\n                switch (match1) {\n                case 'npm_package_description':\n                    return 'the greatest app in the world!';\n                case 'npm_package_name':\n                    return 'swagger-validate-lite';\n                case 'npm_package_nameLib':\n                    return 'swagger_validate';\n                case 'npm_package_version':\n                    return '0.0.1';\n                default:\n                    return match0;\n                }\n            });\n        // init cli\n        if (module !== require.main || local.global.utility2_rollup) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.swagger_validate.js'] =\n            local.assetsDict['/assets.swagger_validate.js'] ||\n            local.fs.readFileSync(\n                local.__dirname + '/lib.swagger_validate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());"}