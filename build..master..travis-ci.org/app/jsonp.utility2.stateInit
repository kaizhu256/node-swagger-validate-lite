window.utility2.stateInit({"utility2":{"assetsDict":{"/assets.index.css":"","/assets.index.template.html":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<!-- \"assets.index.default.template.html\" -->\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\n<style>\n/*csslint\n    box-sizing: false,\n    universal-selector: false\n*/\n*,\n*:after,\n*:before {\n    box-sizing: border-box;\n}\nbody {\n    background: #dde;\n    font-family: Arial, Helvetica, sans-serif;\n    margin: 0 40px;\n}\nbody > a,\nbody > button,\nbody > div,\nbody > input,\nbody > pre,\nbody > select,\nbody > span,\nbody > textarea {\n    margin-bottom: 20px;\n}\nbody > button {\n    width: 20rem;\n}\nbutton {\n    cursor: pointer;\n}\npre {\n    overflow-wrap: break-word;\n    white-space: pre-wrap;\n}\n@keyframes uiAnimateShake {\n    100% {\n        transform: translateX(0);\n    }\n    0%, 20%, 60% {\n        transform: translateX(10px);\n    }\n    40%, 80% {\n        transform: translateX(-10px);\n    }\n}\n.uiAnimateShake {\n    animation-duration: 500ms;\n    animation-name: uiAnimateShake;\n}\n.uiAnimateSlide {\n    overflow-y: hidden;\n    transition: max-height ease-in 250ms, min-height ease-in 250ms, padding-bottom ease-in 250ms, padding-top ease-in 250ms;\n}\n@keyframes uiAnimateSpin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n.utility2FooterDiv {\n    text-align: center;\n}\n.zeroPixel {\n    border: 0;\n    height: 0;\n    margin: 0;\n    padding: 0;\n    width: 0;\n}\n</style>\n<style>\n/*csslint\n*/\ntextarea {\n    font-family: monospace;\n    height: 20rem;\n    width: 100%;\n}\ntextarea[readonly] {\n    background: #ddd;\n}\n</style>\n</head>\n<body>\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 500ms, width 1500ms; width: 0%; z-index: 1;\"></div>\n<div class=\"uiAnimateSpin\" style=\"animation: uiAnimateSpin 2s linear infinite; border: 5px solid #999; border-radius: 50%; border-top: 5px solid #7d7; display: none; height: 25px; vertical-align: middle; width: 25px;\"></div>\n<script>\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    \"use strict\";\n    var ajaxProgressDiv1,\n        ajaxProgressState,\n        ajaxProgressUpdate,\n        timerIntervalAjaxProgressUpdate;\n    ajaxProgressDiv1 = document.querySelector(\"#ajaxProgressDiv1\");\n    setTimeout(function () {\n        ajaxProgressDiv1.style.width = \"25%\";\n    });\n    ajaxProgressState = 0;\n    ajaxProgressUpdate = (window.local &&\n        window.local.ajaxProgressUpdate) || function () {\n        ajaxProgressDiv1.style.width = \"100%\";\n        setTimeout(function () {\n            ajaxProgressDiv1.style.background = \"transparent\";\n            setTimeout(function () {\n                ajaxProgressDiv1.style.width = \"0%\";\n            }, 500);\n        }, 1500);\n    };\n    timerIntervalAjaxProgressUpdate = setInterval(function () {\n        ajaxProgressState += 1;\n        ajaxProgressDiv1.style.width = Math.max(\n            100 - 75 * Math.exp(-0.125 * ajaxProgressState),\n            Number(ajaxProgressDiv1.style.width.slice(0, -1)) || 0\n        ) + \"%\";\n    }, 1000);\n    window.addEventListener(\"load\", function () {\n        clearInterval(timerIntervalAjaxProgressUpdate);\n        ajaxProgressUpdate();\n    });\n}());\n</script>\n<h1>\n<!-- utility2-comment\n    <a\n        {{#if env.npm_package_homepage}}\n        href=\"{{env.npm_package_homepage}}\"\n        {{/if env.npm_package_homepage}}\n        target=\"_blank\"\n    >\nutility2-comment -->\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\n<!-- utility2-comment\n    </a>\nutility2-comment -->\n</h1>\n<h3>{{env.npm_package_description}}</h3>\n<!-- utility2-comment\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\n<div class=\"uiAnimateSlide\" id=\"testReportDiv1\" style=\"border-bottom: 0; border-top: 0; margin-bottom: 0; margin-top: 0; max-height: 0; padding-bottom: 0; padding-top: 0;\"></div>\nutility2-comment -->\n\n\n\n<label>edit or paste swagger.json data below to validate\n</label>\n<textarea class=\"oneval onkeyup onreset\" id=\"inputTextarea1\">{\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\n        \"version\": \"1.0.0\",\n        \"title\": \"Swagger Petstore\",\n        \"termsOfService\": \"http://swagger.io/terms/\",\n        \"contact\": {\n            \"email\": \"apiteam@swagger.io\"\n        },\n        \"license\": {\n            \"name\": \"Apache 2.0\",\n            \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n        }\n    },\n    \"host\": \"petstore.swagger.io\",\n    \"basePath\": \"/v2\",\n    \"tags\": [\n        {\n            \"name\": \"pet\",\n            \"description\": \"Everything about your Pets\",\n            \"externalDocs\": {\n                \"description\": \"Find out more\",\n                \"url\": \"http://swagger.io\"\n            }\n        },\n        {\n            \"name\": \"store\",\n            \"description\": \"Access to Petstore orders\"\n        },\n        {\n            \"name\": \"user\",\n            \"description\": \"Operations about user\",\n            \"externalDocs\": {\n                \"description\": \"Find out more about our store\",\n                \"url\": \"http://swagger.io\"\n            }\n        }\n    ],\n    \"schemes\": [\n        \"http\"\n    ],\n    \"paths\": {\n        \"/pet\": {\n            \"post\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Add a new pet to the store\",\n                \"description\": \"\",\n                \"operationId\": \"addPet\",\n                \"consumes\": [\n                    \"application/json\",\n                    \"application/xml\"\n                ],\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"in\": \"body\",\n                        \"name\": \"body\",\n                        \"description\": \"Pet object that needs to be added to the store\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Pet\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"405\": {\n                        \"description\": \"Invalid input\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            },\n            \"put\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Update an existing pet\",\n                \"description\": \"\",\n                \"operationId\": \"updatePet\",\n                \"consumes\": [\n                    \"application/json\",\n                    \"application/xml\"\n                ],\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"in\": \"body\",\n                        \"name\": \"body\",\n                        \"description\": \"Pet object that needs to be added to the store\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Pet\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid ID supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"Pet not found\"\n                    },\n                    \"405\": {\n                        \"description\": \"Validation exception\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            }\n        },\n        \"/pet/findByStatus\": {\n            \"get\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Finds Pets by status\",\n                \"description\": \"Multiple status values can be provided with comma separated strings\",\n                \"operationId\": \"findPetsByStatus\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"status\",\n                        \"in\": \"query\",\n                        \"description\": \"Status values that need to be considered for filter\",\n                        \"required\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\",\n                            \"enum\": [\n                                \"available\",\n                                \"pending\",\n                                \"sold\"\n                            ],\n                            \"default\": \"available\"\n                        },\n                        \"collectionFormat\": \"multi\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/definitions/Pet\"\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid status value\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            }\n        },\n        \"/pet/findByTags\": {\n            \"get\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Finds Pets by tags\",\n                \"description\": \"Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n                \"operationId\": \"findPetsByTags\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"tags\",\n                        \"in\": \"query\",\n                        \"description\": \"Tags to filter by\",\n                        \"required\": true,\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        },\n                        \"collectionFormat\": \"multi\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/definitions/Pet\"\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid tag value\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ],\n                \"deprecated\": true\n            }\n        },\n        \"/pet/{petId}\": {\n            \"get\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Find pet by ID\",\n                \"description\": \"Returns a single pet\",\n                \"operationId\": \"getPetById\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"petId\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of pet to return\",\n                        \"required\": true,\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Pet\"\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid ID supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"Pet not found\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"api_key\": []\n                    }\n                ]\n            },\n            \"post\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Updates a pet in the store with form data\",\n                \"description\": \"\",\n                \"operationId\": \"updatePetWithForm\",\n                \"consumes\": [\n                    \"application/x-www-form-urlencoded\"\n                ],\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"petId\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of pet that needs to be updated\",\n                        \"required\": true,\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"in\": \"formData\",\n                        \"description\": \"Updated name of the pet\",\n                        \"required\": false,\n                        \"type\": \"string\"\n                    },\n                    {\n                        \"name\": \"status\",\n                        \"in\": \"formData\",\n                        \"description\": \"Updated status of the pet\",\n                        \"required\": false,\n                        \"type\": \"string\"\n                    }\n                ],\n                \"responses\": {\n                    \"405\": {\n                        \"description\": \"Invalid input\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"Deletes a pet\",\n                \"description\": \"\",\n                \"operationId\": \"deletePet\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"api_key\",\n                        \"in\": \"header\",\n                        \"required\": false,\n                        \"type\": \"string\"\n                    },\n                    {\n                        \"name\": \"petId\",\n                        \"in\": \"path\",\n                        \"description\": \"Pet id to delete\",\n                        \"required\": true,\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    }\n                ],\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid ID supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"Pet not found\"\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            }\n        },\n        \"/pet/{petId}/uploadImage\": {\n            \"post\": {\n                \"tags\": [\n                    \"pet\"\n                ],\n                \"summary\": \"uploads an image\",\n                \"description\": \"\",\n                \"operationId\": \"uploadFile\",\n                \"consumes\": [\n                    \"multipart/form-data\"\n                ],\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"petId\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of pet to update\",\n                        \"required\": true,\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    },\n                    {\n                        \"name\": \"additionalMetadata\",\n                        \"in\": \"formData\",\n                        \"description\": \"Additional data to pass to server\",\n                        \"required\": false,\n                        \"type\": \"string\"\n                    },\n                    {\n                        \"name\": \"file\",\n                        \"in\": \"formData\",\n                        \"description\": \"file to upload\",\n                        \"required\": false,\n                        \"type\": \"file\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/ApiResponse\"\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"petstore_auth\": [\n                            \"write:pets\",\n                            \"read:pets\"\n                        ]\n                    }\n                ]\n            }\n        },\n        \"/store/inventory\": {\n            \"get\": {\n                \"tags\": [\n                    \"store\"\n                ],\n                \"summary\": \"Returns pet inventories by status\",\n                \"description\": \"Returns a map of status codes to quantities\",\n                \"operationId\": \"getInventory\",\n                \"produces\": [\n                    \"application/json\"\n                ],\n                \"parameters\": [],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"additionalProperties\": {\n                                \"type\": \"integer\",\n                                \"format\": \"int32\"\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"api_key\": []\n                    }\n                ]\n            }\n        },\n        \"/store/order\": {\n            \"post\": {\n                \"tags\": [\n                    \"store\"\n                ],\n                \"summary\": \"Place an order for a pet\",\n                \"description\": \"\",\n                \"operationId\": \"placeOrder\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"in\": \"body\",\n                        \"name\": \"body\",\n                        \"description\": \"order placed for purchasing the pet\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Order\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Order\"\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid Order\"\n                    }\n                }\n            }\n        },\n        \"/store/order/{orderId}\": {\n            \"get\": {\n                \"tags\": [\n                    \"store\"\n                ],\n                \"summary\": \"Find purchase order by ID\",\n                \"description\": \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n                \"operationId\": \"getOrderById\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"orderId\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of pet that needs to be fetched\",\n                        \"required\": true,\n                        \"type\": \"integer\",\n                        \"maximum\": 10,\n                        \"minimum\": 1,\n                        \"format\": \"int64\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/Order\"\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid ID supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"Order not found\"\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"store\"\n                ],\n                \"summary\": \"Delete purchase order by ID\",\n                \"description\": \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n                \"operationId\": \"deleteOrder\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"orderId\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of the order that needs to be deleted\",\n                        \"required\": true,\n                        \"type\": \"integer\",\n                        \"minimum\": 1,\n                        \"format\": \"int64\"\n                    }\n                ],\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid ID supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"Order not found\"\n                    }\n                }\n            }\n        },\n        \"/user\": {\n            \"post\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Create user\",\n                \"description\": \"This can only be done by the logged in user.\",\n                \"operationId\": \"createUser\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"in\": \"body\",\n                        \"name\": \"body\",\n                        \"description\": \"Created user object\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/User\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"default\": {\n                        \"description\": \"successful operation\"\n                    }\n                }\n            }\n        },\n        \"/user/createWithArray\": {\n            \"post\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Creates list of users with given input array\",\n                \"description\": \"\",\n                \"operationId\": \"createUsersWithArrayInput\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"in\": \"body\",\n                        \"name\": \"body\",\n                        \"description\": \"List of user object\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/definitions/User\"\n                            }\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"default\": {\n                        \"description\": \"successful operation\"\n                    }\n                }\n            }\n        },\n        \"/user/createWithList\": {\n            \"post\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Creates list of users with given input array\",\n                \"description\": \"\",\n                \"operationId\": \"createUsersWithListInput\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"in\": \"body\",\n                        \"name\": \"body\",\n                        \"description\": \"List of user object\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"$ref\": \"#/definitions/User\"\n                            }\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"default\": {\n                        \"description\": \"successful operation\"\n                    }\n                }\n            }\n        },\n        \"/user/login\": {\n            \"get\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Logs user into the system\",\n                \"description\": \"\",\n                \"operationId\": \"loginUser\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"username\",\n                        \"in\": \"query\",\n                        \"description\": \"The user name for login\",\n                        \"required\": true,\n                        \"type\": \"string\"\n                    },\n                    {\n                        \"name\": \"password\",\n                        \"in\": \"query\",\n                        \"description\": \"The password for login in clear text\",\n                        \"required\": true,\n                        \"type\": \"string\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"schema\": {\n                            \"type\": \"string\"\n                        },\n                        \"headers\": {\n                            \"X-Rate-Limit\": {\n                                \"type\": \"integer\",\n                                \"format\": \"int32\",\n                                \"description\": \"calls per hour allowed by the user\"\n                            },\n                            \"X-Expires-After\": {\n                                \"type\": \"string\",\n                                \"format\": \"date-time\",\n                                \"description\": \"date in UTC when token expires\"\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid username/password supplied\"\n                    }\n                }\n            }\n        },\n        \"/user/logout\": {\n            \"get\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Logs out current logged in user session\",\n                \"description\": \"\",\n                \"operationId\": \"logoutUser\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [],\n                \"responses\": {\n                    \"default\": {\n                        \"description\": \"successful operation\"\n                    }\n                }\n            }\n        },\n        \"/user/{username}\": {\n            \"get\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Get user by user name\",\n                \"description\": \"\",\n                \"operationId\": \"getUserByName\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"username\",\n                        \"in\": \"path\",\n                        \"description\": \"The name that needs to be fetched. Use user1 for testing. \",\n                        \"required\": true,\n                        \"type\": \"string\"\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"successful operation\",\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/User\"\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Invalid username supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"User not found\"\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Updated user\",\n                \"description\": \"This can only be done by the logged in user.\",\n                \"operationId\": \"updateUser\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"username\",\n                        \"in\": \"path\",\n                        \"description\": \"name that need to be updated\",\n                        \"required\": true,\n                        \"type\": \"string\"\n                    },\n                    {\n                        \"in\": \"body\",\n                        \"name\": \"body\",\n                        \"description\": \"Updated user object\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"$ref\": \"#/definitions/User\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid user supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"User not found\"\n                    }\n                }\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"user\"\n                ],\n                \"summary\": \"Delete user\",\n                \"description\": \"This can only be done by the logged in user.\",\n                \"operationId\": \"deleteUser\",\n                \"produces\": [\n                    \"application/xml\",\n                    \"application/json\"\n                ],\n                \"parameters\": [\n                    {\n                        \"name\": \"username\",\n                        \"in\": \"path\",\n                        \"description\": \"The name that needs to be deleted\",\n                        \"required\": true,\n                        \"type\": \"string\"\n                    }\n                ],\n                \"responses\": {\n                    \"400\": {\n                        \"description\": \"Invalid username supplied\"\n                    },\n                    \"404\": {\n                        \"description\": \"User not found\"\n                    }\n                }\n            }\n        }\n    },\n    \"securityDefinitions\": {\n        \"petstore_auth\": {\n            \"type\": \"oauth2\",\n            \"authorizationUrl\": \"http://petstore.swagger.io/oauth/dialog\",\n            \"flow\": \"implicit\",\n            \"scopes\": {\n                \"write:pets\": \"modify pets in your account\",\n                \"read:pets\": \"read your pets\"\n            }\n        },\n        \"api_key\": {\n            \"type\": \"apiKey\",\n            \"name\": \"api_key\",\n            \"in\": \"header\"\n        }\n    },\n    \"definitions\": {\n        \"Order\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                },\n                \"petId\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                },\n                \"quantity\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                },\n                \"shipDate\": {\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"\n                },\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"Order Status\",\n                    \"enum\": [\n                        \"placed\",\n                        \"approved\",\n                        \"delivered\"\n                    ]\n                },\n                \"complete\": {\n                    \"type\": \"boolean\",\n                    \"default\": false\n                }\n            },\n            \"xml\": {\n                \"name\": \"Order\"\n            }\n        },\n        \"Category\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                },\n                \"name\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"xml\": {\n                \"name\": \"Category\"\n            }\n        },\n        \"User\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                },\n                \"username\": {\n                    \"type\": \"string\"\n                },\n                \"firstName\": {\n                    \"type\": \"string\"\n                },\n                \"lastName\": {\n                    \"type\": \"string\"\n                },\n                \"email\": {\n                    \"type\": \"string\"\n                },\n                \"password\": {\n                    \"type\": \"string\"\n                },\n                \"phone\": {\n                    \"type\": \"string\"\n                },\n                \"userStatus\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\",\n                    \"description\": \"User Status\"\n                }\n            },\n            \"xml\": {\n                \"name\": \"User\"\n            }\n        },\n        \"Tag\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                },\n                \"name\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"xml\": {\n                \"name\": \"Tag\"\n            }\n        },\n        \"Pet\": {\n            \"type\": \"object\",\n            \"required\": [\n                \"name\",\n                \"photoUrls\"\n            ],\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                },\n                \"category\": {\n                    \"$ref\": \"#/definitions/Category\"\n                },\n                \"name\": {\n                    \"type\": \"string\",\n                    \"example\": \"doggie\"\n                },\n                \"photoUrls\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                        \"name\": \"photoUrl\",\n                        \"wrapped\": true\n                    },\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"tags\": {\n                    \"type\": \"array\",\n                    \"xml\": {\n                        \"name\": \"tag\",\n                        \"wrapped\": true\n                    },\n                    \"items\": {\n                        \"$ref\": \"#/definitions/Tag\"\n                    }\n                },\n                \"status\": {\n                    \"type\": \"string\",\n                    \"description\": \"pet status in the store\",\n                    \"enum\": [\n                        \"available\",\n                        \"pending\",\n                        \"sold\"\n                    ]\n                }\n            },\n            \"xml\": {\n                \"name\": \"Pet\"\n            }\n        },\n        \"ApiResponse\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"code\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                },\n                \"type\": {\n                    \"type\": \"string\"\n                },\n                \"message\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    },\n    \"externalDocs\": {\n        \"description\": \"Find out more about Swagger\",\n        \"url\": \"http://swagger.io\"\n    }\n}</textarea>\n<pre id=\"outputPre1\"></pre>\n<!-- utility2-comment\n{{#if isRollup}}\n<script src=\"assets.app.js\"></script>\n{{#unless isRollup}}\nutility2-comment -->\n<script src=\"assets.utility2.rollup.js\"></script>\n<script>window.utility2.onResetBefore.counter += 1;</script>\n<script src=\"jsonp.utility2.stateInit?callback=window.utility2.stateInit\"></script>\n<script src=\"assets.swagger_validate.js\"></script>\n<script src=\"assets.example.js\"></script>\n<script src=\"assets.test.js\"></script>\n<script>window.utility2.onResetBefore();</script>\n<!-- utility2-comment\n{{/if isRollup}}\nutility2-comment -->\n<div class=\"utility2FooterDiv\">\n    [ this app was created with\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\n    ]\n</div>\n</body>\n</html>\n","/assets.swgg.swagger.json":""},"env":{"NODE_ENV":"test","npm_package_description":"this zero-dependency package will provide a simple cli-tool to validate swagger.json","npm_package_homepage":"https://github.com/kaizhu256/node-swagger-validate-lite","npm_package_name":"swagger-validate-lite","npm_package_nameLib":"swagger_validate","npm_package_version":"2018.1.21"}}});